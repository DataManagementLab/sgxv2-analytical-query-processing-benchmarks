enclave {
    from "sgx_tstdc.edl" import *; // make ported stdc library available inside enclave

    /**
     * Describes how often the same data is read. If unique is set to true, data is only read once.
     * If unique is set to false, num_warmup_runs are done to get the data into cache if possible.
     * Afterwards the same data is read num_runs times.
     */
    struct MultiReadConfiguration {
        int unique;
        uint8_t num_warmup_runs;
        uint32_t num_runs;
    };

    trusted {
        /* define ECALLs here. */
        public void ecall_noop();
        public void ecall_init_data(size_t num_entries);
        public void ecall_init_dict(size_t num_entries);
        public void ecall_free_preload_data();
        public void ecall_init_results();
        public void ecall_init_results_bitvector(size_t num_entries);
        public void ecall_init_results_index(size_t num_threads);
        public void ecall_init_results_dict(size_t num_threads);
        public void ecall_init_results_index_pre_alloc(size_t num_threads,
                                                       uint8_t predicate_low,
                                                       uint8_t predicate_high,
                                                       size_t num_records_per_thread);
        public void ecall_init_results_dict_pre_alloc(size_t num_threads,
                                                      uint8_t predicate_low,
                                                      uint8_t predicate_high,
                                                      size_t num_records_per_thread);
        public void ecall_index_scan_user(uint8_t predicate_low,
                                          uint8_t predicate_high,
                                          [user_check] const uint8_t *data,
                                          size_t num_records,
                                          [user_check] void *output_buffer,
                                          [user_check] uint64_t *cpu_cntr,
                                          size_t num_runs,
                                          size_t warmup_runs,
                                          int unique_data);
        public void ecall_index_scan_self_alloc_preload(uint8_t predicate_low,
                                                        uint8_t predicate_high,
                                                        size_t start_idx,
                                                        size_t num_records,
                                                        size_t thread_id,
                                                        [user_check] uint64_t *cpu_cntr,
                                                        size_t num_runs,
                                                        size_t warmup_runs,
                                                        int unique_data,
                                                        int pre_alloc);
        public void ecall_scalar_scan_user(uint8_t predicate_low,
                                          uint8_t predicate_high,
                                          [user_check] const uint8_t *data,
                                          size_t num_records,
                                          [user_check] void *output_buffer,
                                          [user_check] uint64_t *cpu_cntr,
                                          size_t num_runs,
                                          size_t warmup_runs,
                                          int unique_data);
        public void ecall_scalar_scan_preload(uint8_t predicate_low,
                                                        uint8_t predicate_high,
                                                        size_t start_idx,
                                                        size_t num_records,
                                                        size_t thread_id,
                                                        [user_check] uint64_t *cpu_cntr,
                                                        size_t num_runs,
                                                        size_t warmup_runs,
                                                        int unique_data,
                                                        int pre_alloc);
        public void ecall_bitvector_scan_user(uint8_t predicate_low,
                                              uint8_t predicate_high,
                                              [user_check] const uint8_t *data,
                                              size_t num_records,
                                              [user_check] uint64_t *output_buffer,
                                              [user_check] uint64_t * cpu_cntr,
                                              size_t num_runs,
                                              size_t warmup_runs,
                                              int unique_data);
        public void ecall_bitvector_scan_preload(uint8_t predicate_low,
                                                 uint8_t predicate_high,
                                                 size_t start_idx,
                                                 size_t num_records,
                                                 size_t output_idx,
                                                 [user_check] uint64_t *cpu_cntr,
                                                 size_t num_runs,
                                                 size_t warmup_runs,
                                                 int unique_data);
        public void ecall_dict_scan_user(int64_t predicate_low,
                                         int64_t predicate_high,
                                         [user_check] const uint8_t *data,
                                         size_t num_records,
                                         [user_check] const int64_t *dict,
                                         [user_check] void *output_buffer,
                                         [user_check] uint64_t *cpu_cntr,
                                         size_t num_runs,
                                         size_t warmup_runs,
                                         int unique_data);
        public void ecall_dict_scan_preload(int64_t predicate_low,
                                            int64_t predicate_high,
                                            size_t start_idx,
                                            size_t num_records,
                                            size_t thread_id,
                                            [user_check] uint64_t *cpu_cntr,
                                            size_t num_runs,
                                            size_t warmup_runs,
                                            int unique_data,
                                            int pre_alloc);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print_string([in, string] const char *str);
        void ocall_print_error([in, string] const char *str);
    };
};


